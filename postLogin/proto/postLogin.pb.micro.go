// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/postLogin.proto

package postLogin

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PostLogin service

func NewPostLoginEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PostLogin service

type PostLoginService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (PostLogin_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (PostLogin_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (PostLogin_BidiStreamService, error)
}

type postLoginService struct {
	c    client.Client
	name string
}

func NewPostLoginService(name string, c client.Client) PostLoginService {
	return &postLoginService{
		c:    c,
		name: name,
	}
}

func (c *postLoginService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "PostLogin.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLoginService) ClientStream(ctx context.Context, opts ...client.CallOption) (PostLogin_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "PostLogin.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &postLoginServiceClientStream{stream}, nil
}

type PostLogin_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type postLoginServiceClientStream struct {
	stream client.Stream
}

func (x *postLoginServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *postLoginServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *postLoginServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *postLoginServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *postLoginServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *postLoginServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *postLoginService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (PostLogin_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "PostLogin.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &postLoginServiceServerStream{stream}, nil
}

type PostLogin_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type postLoginServiceServerStream struct {
	stream client.Stream
}

func (x *postLoginServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *postLoginServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *postLoginServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *postLoginServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *postLoginServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *postLoginServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *postLoginService) BidiStream(ctx context.Context, opts ...client.CallOption) (PostLogin_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "PostLogin.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &postLoginServiceBidiStream{stream}, nil
}

type PostLogin_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type postLoginServiceBidiStream struct {
	stream client.Stream
}

func (x *postLoginServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *postLoginServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *postLoginServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *postLoginServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *postLoginServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *postLoginServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *postLoginServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PostLogin service

type PostLoginHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, PostLogin_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, PostLogin_ServerStreamStream) error
	BidiStream(context.Context, PostLogin_BidiStreamStream) error
}

func RegisterPostLoginHandler(s server.Server, hdlr PostLoginHandler, opts ...server.HandlerOption) error {
	type postLogin interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type PostLogin struct {
		postLogin
	}
	h := &postLoginHandler{hdlr}
	return s.Handle(s.NewHandler(&PostLogin{h}, opts...))
}

type postLoginHandler struct {
	PostLoginHandler
}

func (h *postLoginHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.PostLoginHandler.Call(ctx, in, out)
}

func (h *postLoginHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.PostLoginHandler.ClientStream(ctx, &postLoginClientStreamStream{stream})
}

type PostLogin_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type postLoginClientStreamStream struct {
	stream server.Stream
}

func (x *postLoginClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *postLoginClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *postLoginClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *postLoginClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *postLoginClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *postLoginHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.PostLoginHandler.ServerStream(ctx, m, &postLoginServerStreamStream{stream})
}

type PostLogin_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type postLoginServerStreamStream struct {
	stream server.Stream
}

func (x *postLoginServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *postLoginServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *postLoginServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *postLoginServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *postLoginServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *postLoginHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.PostLoginHandler.BidiStream(ctx, &postLoginBidiStreamStream{stream})
}

type PostLogin_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type postLoginBidiStreamStream struct {
	stream server.Stream
}

func (x *postLoginBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *postLoginBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *postLoginBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *postLoginBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *postLoginBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *postLoginBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
